apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'

android {
    compileSdkVersion 28
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.alexiscrack3.booster"
        minSdkVersion 23
        targetSdkVersion 28
        multiDexEnabled true
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "BASE_URL", "\"http://localhost:3000/\""
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
    dataBinding {
        enabled true
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
    testOptions {
        animationsDisabled true

        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.preference:preference:1.1.0'

    // google
    implementation 'com.google.android.material:material:1.1.0'

    // lifecycle component
    def lifecycle_version = '2.2.0'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    def arch_version = "2.1.0"
    testImplementation "androidx.arch.core:core-testing:$arch_version"

    // navigation component
    def nav_version = "2.3.0-alpha03"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    testImplementation "androidx.navigation:navigation-testing:$nav_version"

    // RxJava
    implementation 'io.reactivex.rxjava2:rxjava:2.2.13'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

    // networking
    def retrofit_version = '2.6.1'
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"

    implementation 'com.squareup.okhttp3:logging-interceptor:4.1.0'

    // dependency injection
    def koin_version = '2.1.3'
    implementation "org.koin:koin-android:$koin_version"
    implementation "org.koin:koin-android-viewmodel:$koin_version"
    testImplementation "org.koin:koin-test:$koin_version"

    // logging
    implementation 'com.jakewharton.timber:timber:4.7.1'

    // firebase - cloud firestore
    implementation 'com.google.firebase:firebase-firestore:21.3.1'

    implementation "androidx.multidex:multidex:2.0.1"

    // JUnit 4 framework
    testImplementation 'junit:junit:4.12'

    // core library
    testImplementation 'androidx.test:core:1.2.0'

    // testing fragments in isolation
    debugImplementation 'androidx.fragment:fragment-testing:1.2.2'

    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"

    // AndroidJUnit4 runner
    testImplementation 'androidx.test.ext:junit:1.1.1'

    // Robolectric
    testImplementation 'org.robolectric:robolectric:4.3.1'

    // Espresso
    testImplementation 'androidx.test.espresso:espresso-intents:3.2.0'

    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

jacoco {
    toolVersion = "$jacoco_version"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport, dependsOn: [
    'testDebugUnitTest',
]) {
    // Define which type of report you want to generate
    reports {
        xml.enabled = true
        html.enabled = true
    }

    // define which classes to exclude
    def fileFilter = [
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*Test*.*',
        'android/**/*.*'
    ]

    // Define your source and your classes: we want to test the production code
    def mainSrc = "$project.projectDir/src/main/java"
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug/classes", excludes: fileFilter)
    def dataTree = fileTree(dir: project.buildDir, includes: [
        'jacoco/testDebugUnitTest.exec',
        'outputs/code-coverage/connected/*coverage.ec'
    ])

    // Explain to Jacoco where is your source code
    getSourceDirectories().setFrom(mainSrc)

    // Explain to Jacoco where are you .class file
    getClassDirectories().setFrom(debugTree)

    // As you want to gather all your tests reports, add the ec and exec you want to be took into
    // account when generating the report
    getExecutionData().setFrom(dataTree)
}
